#define C3 131
#define D3 147
#define E3 165
#define F3 175
#define G3 196
#define A3 220
#define B3 247
#define C4 262

int melody[] = {
C3,C3,G3,G3,A3,A3,G3,0,F3,F3,E3,E3,D3,D3,C3,0,
G3,G3,F3,F3,E3,E3,D3,0,G3,G3,F3,F3,E3,E3,D3,0,
C3,C3,G3,G3,A3,A3,G3,0,F3,F3,E3,E3,D3,D3,C3,0};

int noteDurations[]={
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
  4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,
};

int thisNote=-1,noteDuration=0;
long previousTime=0,  
     presentTime=0,
     pauseBetweenNotes=0;


int latchPin=8;
int clockPin=12;
int dataPin=11;

int buttonState = 0;
int presentState=0;
int pattern = 0;
byte colDataMatrix[8]={
  B11111110,
  B11111101,
  B11111011,
  B11110111,
  B11101111,
  B11011111,
  B10111111,
  B01111111};

byte a[8]={
  B01100110,
  B10011001,
  B10100101,
  B11011011,
  B10100101,
  B01011010,
  B00100100,
  B00011000};
  
byte b[8]={
  B01100110,
  B10011001,
  B10000001,
  B10000001,
  B10000001,
  B01000010,
  B00100100,
  B00011000};
  

void checkToPlay()
{
  presentTime = millis();
  if(presentTime - previousTime >= pauseBetweenNotes)
  {
    thisNote += 1;
    if(thisNote >= 48)
    {
      thisNote = -1;
      pauseBetweenNotes = 100;
      previousTime = millis();
    }
    else
    {
      noteDuration = 500 / noteDurations[thisNote];
      tone(9,melody[thisNote],noteDuration);
      pauseBetweenNotes = noteDuration * 1.2;
      previousTime = millis();
    }
  }
}
  
void setup()
{
  pinMode(latchPin,OUTPUT);
  pinMode(clockPin,OUTPUT);
  pinMode(dataPin,OUTPUT);
  pinMode(2,INPUT_PULLUP);
};
  
void loop()
{
   presentState = digitalRead(2);
   for(int i = 0; i < 8 ; i++)
  {    
     digitalWrite(latchPin,LOW);
     shiftOut(dataPin,clockPin,MSBFIRST,colDataMatrix[i]);
     if(presentState == 0)
     {
       pattern ++;
       if(pattern > 2)pattern = 0;
     }
     if(pattern == 0)
     {
       digitalWrite(latchPin,LOW);
      shiftOut(dataPin,clockPin,MSBFIRST,colDataMatrix[i]);
      shiftOut(dataPin,clockPin,MSBFIRST,a[i]);
      digitalWrite(latchPin,HIGH);
      checkToPlay();
      delay(1);
     }
     else if(pattern == 1)
     {
       digitalWrite(latchPin,LOW);
      shiftOut(dataPin,clockPin,MSBFIRST,colDataMatrix[i]);
      shiftOut(dataPin,clockPin,MSBFIRST,b[i]);
      digitalWrite(latchPin,HIGH);
      checkToPlay();
      delay(1);
     }
  }
}